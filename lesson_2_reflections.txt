What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git will create its special directory .git and
its associated subdirectories.  You need to do this so that git can track all of
the changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is a temporary store whereas the repository and working
directory are permanent.  The value it brings is that it handles marshalling all
of the files together into a commit for you - you just have to worry about one
file at a time.

How can you use the staging area to make sure you have one commit per logical
change?

Simply by using git diff --staged.  This will separate out the changes that you
have currently in your files with those that you wish to commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If I wanted to try something experimental, but also wanted to continue to make
changes to the non-experimental code, then branching would be prefect.  The
branches would allow me to track changes for each of the individual histories,
and merge them together if I so chose.

How do the diagrams help you visualize the branch structure?

While a single branch my be easy to visualize without any aid, I can imagine
with more complex branching that diagrams would be necessary to understand
the structure as well as how to integrate various features.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

After merging two branches, you have just one branch.  This is why it is
represented the way it is in the diagram.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

The benefits are that even simple merge's can take time to follow, so if git is
able to resolve merges automatically then so much the better.  However, it is
not actually able to understand the code itself, and so you will always want to
test what git has done.
